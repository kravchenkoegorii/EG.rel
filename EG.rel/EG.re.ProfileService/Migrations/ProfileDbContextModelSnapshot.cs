// <auto-generated />
using System;
using EG.rel.ProfileService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EG.rel.ProfileService.Migrations
{
    [DbContext(typeof(ProfileDbContext))]
    partial class ProfileDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EG.rel.ProfileService.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("House")
                        .HasColumnType("text")
                        .HasColumnName("house");

                    b.Property<double?>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double?>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("EG.rel.ProfileService.Entities.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProfileUserId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_user_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_hobbies");

                    b.HasIndex("ProfileUserId")
                        .HasDatabaseName("ix_hobbies_profile_user_id");

                    b.ToTable("hobbies", (string)null);
                });

            modelBuilder.Entity("EG.rel.ProfileService.Entities.ProfileUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patronymic");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_profiles_address_id");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("EG.rel.ProfileService.Entities.Hobby", b =>
                {
                    b.HasOne("EG.rel.ProfileService.Entities.ProfileUser", null)
                        .WithMany("Hobbies")
                        .HasForeignKey("ProfileUserId")
                        .HasConstraintName("fk_hobbies_profiles_profile_user_id");
                });

            modelBuilder.Entity("EG.rel.ProfileService.Entities.ProfileUser", b =>
                {
                    b.HasOne("EG.rel.ProfileService.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_profiles_addresses_address_id");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("EG.rel.ProfileService.Entities.ProfileUser", b =>
                {
                    b.Navigation("Hobbies");
                });
#pragma warning restore 612, 618
        }
    }
}
